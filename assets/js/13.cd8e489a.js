(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{283:function(s,t,a){"use strict";a.r(t);var e=a(5),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("blockquote",[a("p",[s._v("C++ 是一个难学易用的语言！难学一方面在于其广博，因此我选择用笔记的形式精简出一些有用的条款。")])]),s._v(" "),a("h2",{attrs:{id:"引用和指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用和指针"}},[s._v("#")]),s._v(" 引用和指针")]),s._v(" "),a("h3",{attrs:{id:"指针-引用的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针-引用的区别"}},[s._v("#")]),s._v(" 指针/引用的区别")]),s._v(" "),a("p",[s._v("引用是对象的地址；指针是对象，其对象的内容是地址。")]),s._v(" "),a("p",[s._v("从其惯用写法也可以发现其差别：")]),s._v(" "),a("div",{staticClass:"language-C ++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" ri "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ri 可以代表对象本身")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pi "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// pi 需要运算符 * 来获取对象")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("引用相当于别名，其主要功能是传递函数参数和返回值。")]),s._v(" "),a("p",[s._v("引用的规则：")]),s._v(" "),a("ol",[a("li",[s._v("必须初始化（指针可任何时候被初始化）")]),s._v(" "),a("li",[s._v("不能有 "),a("code",[s._v("NULL")]),s._v(" 引用（指针可指向 "),a("code",[s._v("NULL")]),s._v("）")]),s._v(" "),a("li",[s._v("一旦被初始化，不能改变引用关系（指针可随时修改所指对象）")])]),s._v(" "),a("p",[s._v("下面的代码会产生不确定的结果，因此一定避免这种写法。")]),s._v(" "),a("div",{staticClass:"language-C ++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置指针为空值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" rc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 让引用指向空值")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("有时候如果程序运行过程中会出现类似的情况，即变量可能指向空值，那么变量应该"),a("strong",[s._v("声明为指针")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"什么时候使用指针-引用更合适"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用指针-引用更合适"}},[s._v("#")]),s._v(" 什么时候使用指针/引用更合适")]),s._v(" "),a("p",[s._v("如果存在以下两种情况：")]),s._v(" "),a("ol",[a("li",[s._v("存在不指向任何对象的可能")]),s._v(" "),a("li",[s._v("不同时刻指向不同对象")])]),s._v(" "),a("p",[s._v("请使用"),a("strong",[s._v("指针")]),s._v("。")]),s._v(" "),a("p",[s._v("若总是指向一个对象并且一旦指向某个对象后不会改变指向，那么使用"),a("strong",[s._v("引用")]),s._v("更为合理。")]),s._v(" "),a("p",[s._v("其次，重载操作符时，也应该使用"),a("strong",[s._v("引用")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[s._v("#")]),s._v(" 类型转换")]),s._v(" "),a("p",[s._v("四个操作符：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("static_cast<type>(expression)")]),s._v("，在功能上与 C 风格的类型转换一样强大")]),s._v(" "),a("li",[a("code",[s._v("const_cast<type>(expression)")]),s._v("，转换掉对象的 "),a("code",[s._v("const")]),s._v(" 属性")]),s._v(" "),a("li",[a("code",[s._v("dynamic_cast<type>(expression)")]),s._v("，安全地沿着类的关系"),a("strong",[s._v("向下")]),s._v("进行类型转换")]),s._v(" "),a("li",[a("code",[s._v("reinterpret_cast<type>(expression)")]),s._v("，可用于函数指针的类型转换")])]),s._v(" "),a("p",[s._v("一般不建议代码里出现类型转换的语句，而且可以看到，C++ 类型转换的写法很不美观且键入麻烦。")])])}),[],!1,null,null,null);t.default=r.exports}}]);