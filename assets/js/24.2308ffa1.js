(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{294:function(v,_,t){"use strict";t.r(_);var e=t(5),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"回溯法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯法"}},[v._v("#")]),v._v(" 回溯法")]),v._v(" "),t("p",[v._v("回溯法可以看作蛮力法的升级版，它从解决问题每一步的所有可能选项里系统地选出一个可行的解决方案。")]),v._v(" "),t("p",[v._v("回溯法非常适合由多个步骤组成的问题，并且每个步骤都有多个选项。当我们在某一步选择了其中一个选项时，就进入下一步，然后又面临新的选项。我们就这样重复选择，直至到达最终的状态。")]),v._v(" "),t("p",[v._v("一般可以用树状结构表示回溯法的搜索过程。若在某一步有 n 个可能选项，则有 n 个子节点，如果叶节点的状态满足题目约束，则找到了一个可行解。否则，尝试其他兄弟选项，若依旧没有可行解，则回溯到父节点。若所有节点均已遍历，仍无满足条件的终结状态，则该问题无解。")]),v._v(" "),t("p",[v._v("一般遇到"),t("strong",[v._v("二维数组")]),v._v("或者"),t("strong",[v._v("网格运动")]),v._v("相关的题目都可以用回溯法解决。")]),v._v(" "),t("h2",{attrs:{id:"动态规划和贪婪算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划和贪婪算法"}},[v._v("#")]),v._v(" 动态规划和贪婪算法")]),v._v(" "),t("p",[v._v("动态规划问题的特点：")]),v._v(" "),t("ol",[t("li",[v._v("求解问题的最优解。")]),v._v(" "),t("li",[v._v("整体问题的最优解依赖子问题的最优解。")]),v._v(" "),t("li",[v._v("子问题相互交叠。")])]),v._v(" "),t("p",[v._v("贪婪算法每一步都能做出一个贪婪的选择，基于这个选择，我们可以得到问题的最优解，但是"),t("strong",[v._v("贪婪选择需要用数学方法证明其正确性")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"位运算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[v._v("#")]),v._v(" 位运算")]),v._v(" "),t("p",[v._v("位运算包括与（"),t("code",[v._v("&")]),v._v("）、或（"),t("code",[v._v("|")]),v._v("）、异或（"),t("code",[v._v("^")]),v._v("）、左移（"),t("code",[v._v("<<")]),v._v("）、右移（"),t("code",[v._v(">>")]),v._v("）这五种。")]),v._v(" "),t("p",[v._v("把一个整数减去 1 之后再和原来的整数做与运算（"),t("code",[v._v("n & (n - 1)")]),v._v("），得到的结果相当于把整数的二进制表示中最右边的 1 变成 0。很多二进制问题都可以用这种思路解决，比如判断是不是 2 的整数次方，比如整数 m 需要改变多少位才能得到整数 n（先用异或再统计 1 的个数）。")])])}),[],!1,null,null,null);_.default=s.exports}}]);