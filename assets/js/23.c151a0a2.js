(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{292:function(s,t,a){"use strict";a.r(t);var n=a(5),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-递归与循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-递归与循环"}},[s._v("#")]),s._v(" 1 递归与循环")]),s._v(" "),a("p",[s._v("通常基于递归的代码比较简洁，也比较容易实现，但性能却不如基于循环的实现方法，因为递归时会存在额外的函数调用，内存栈操作以及重复计算，甚至有时会出现调用栈溢出的情况。")]),s._v(" "),a("p",[s._v("但是如果没有特殊要求，可以优先考虑递归的方法写代码。")]),s._v(" "),a("h2",{attrs:{id:"_2-查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找"}},[s._v("#")]),s._v(" 2 查找")]),s._v(" "),a("p",[s._v("顺序查找、二分查找、哈希查找、二叉排序查找都是很基础的内容。")]),s._v(" "),a("p",[s._v("二分查找的灵活运用：在排序数组中查找特定的元素都可以考虑用二分查找来解决，比如查找数字在排序数组中出现的次数（二分查找分别寻找第一个 k 和最后一个 k），比如在排序数组中找出一个值与下标不等/相等的元素等。")]),s._v(" "),a("h3",{attrs:{id:"_2-1-二分查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二分查找"}},[s._v("#")]),s._v(" 2.1 二分查找")]),s._v(" "),a("p",[s._v("二分查找法的 "),a("code",[s._v("O(log n)")]),s._v(" 让它成为十分高效的算法，主要用于解决在"),a("strong",[s._v("一堆数中找出指定的数")]),s._v("这类问题，想要应用二分查找法，这一堆数就必须满足：")]),s._v(" "),a("ul",[a("li",[s._v("存储在数组中")]),s._v(" "),a("li",[s._v("有序排列")])]),s._v(" "),a("p",[s._v("如果数组存储在链表中，就无法使用二分查找了。至于是递增、递减以及是否有重复元素都可以适用，不过通常我们假设"),a("strong",[s._v("数组递增排列，且无重复元素")]),s._v("。")]),s._v(" "),a("p",[s._v("下面强烈安利 C++ 标准库 "),a("code",[s._v("<algorithm>")]),s._v(" 里简洁无比、bug free 的写法，下面的代码不是原本的实现，但借鉴了其思想。")]),s._v(" "),a("div",{staticClass:"language-C ++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从非递减序列 data 中寻找 value 所在位置")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// [first, last) 通常我们习惯了左闭右开的集合表示方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("BinarySearch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 搜索区间[first, last)不为空")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 防溢出")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            first "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            last "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("防溢出：防止 "),a("code",[s._v("(first + last) / 2")]),s._v(" 溢出，且 "),a("code",[s._v("mid")]),s._v(" 为上位中位数（因为写法简洁），由于算中点时应从闭区间一侧向中心靠拢，所以 "),a("code",[s._v("mid = first + (last - first) / 2")]),s._v("，若为 "),a("code",[s._v("(first, last]")]),s._v("，则 "),a("code",[s._v("mid = last - (last - first) / 2")]),s._v("。")]),s._v(" "),a("p",[s._v("二分查找不仅可以用来寻找特定值，也可以用来寻找边界（上界，下界），还可以用上下界来寻找区域。")])])}),[],!1,null,null,null);t.default=r.exports}}]);